apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: eks-cluster-crossplane
  title: Create an Amazon EKS Cluster(Crossplane)
  description: Create an Amazon EKS Cluster using Crossplane
spec:
  owner: user:guest
  type: template

  parameters:
    - title: Basic EKS Cluster Configuration
      required:
        - clusterName
        - version
        - region
      properties:
        clusterName:
          title: Cluster Name
          type: string
          description: The name of your EKS cluster
        version:
          title: EKS Version
          type: string
          description: The version of EKS cluster
          enum:
            - "1.29"
            - "1.28"
            - "1.27"
        region:
          title: AWS Region
          type: string
          description: The AWS region where the cluster will be deployed
          enum:
            - ap-northeast-1
            - us-east-1
            - us-west-2
    - title: Choose a Repo location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./content
        values:
          destination: ${{ parameters.repoUrl | parseRepoUrl}}
    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}
        repoVisibility: public
        defaultBranch: main
    - id: debug-wait
      name: Waiting
      action: debug:wait
      input:
        seconds: 5
    #Start a GitHub Action to create an EKS cluster with ACK
    - id: github-action
      name: Trigger GitHub Action
      action: github:actions:dispatch
      input:
        workflowId: workflow.yml
        repoUrl: ${{ parameters.repoUrl }}
        branchOrTagName: 'main'
        workflowInputs:
          clusterName: ${{ parameters.clusterName }}
          region: ${{ parameters.region }}
          version: ${{ parameters.version }}

  
  # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}